/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package laboratorio4;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.Collections;
/**
 *
 * @author Juan David Monroy
 */
public class GUI extends javax.swing.JFrame {
     List<Integer> arregloNumeros = new ArrayList<>();
    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        //Deshabilitan los botones apenas el aplicativo se inicia
         intercambio_button.setEnabled(false);
         button_reemplazar.setEnabled(false);
         refresh_button.setEnabled(false);
         invertir_button.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        crear = new javax.swing.JButton();
        tamañoVector = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        intercambio_button = new javax.swing.JButton();
        refresh_button = new javax.swing.JButton();
        button_reemplazar = new javax.swing.JButton();
        invertir_button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Almacenamiento");

        crear.setText("Crear");
        crear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                crearMouseClicked(evt);
            }
        });

        tamañoVector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tamañoVectorActionPerformed(evt);
            }
        });
        tamañoVector.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tamañoVectorKeyTyped(evt);
            }
        });

        jLabel1.setText("Ingrese el tamaño");

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Posicion", "Numero"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tabla.setEnabled(false);
        jScrollPane1.setViewportView(tabla);

        intercambio_button.setText("Intercambiar Valor");
        intercambio_button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                intercambio_buttonMouseClicked(evt);
            }
        });
        intercambio_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                intercambio_buttonActionPerformed(evt);
            }
        });

        refresh_button.setText("Refrescar");
        refresh_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refresh_buttonActionPerformed(evt);
            }
        });

        button_reemplazar.setText("Reemplazar");
        button_reemplazar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_reemplazarActionPerformed(evt);
            }
        });

        invertir_button.setText("Invertir Valores");
        invertir_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invertir_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tamañoVector, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(crear)
                        .addGap(18, 18, 18)
                        .addComponent(intercambio_button))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(refresh_button)
                            .addComponent(button_reemplazar)
                            .addComponent(invertir_button))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tamañoVector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(crear)
                    .addComponent(intercambio_button))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(refresh_button)
                        .addGap(18, 18, 18)
                        .addComponent(button_reemplazar)
                        .addGap(18, 18, 18)
                        .addComponent(invertir_button)))
                .addContainerGap(106, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   /**
     * Este método permite realizar el intercambio de Elementos dados por el usuario
     * @param i   hace referencia a la primera posición interesada a cambiar por el usuario
     * @param j   hace referencia a la segunda posición interesada a cambiar por el usuario
     * @param model Genera las columas de la tabla donde se verá el intercambio de posición
    */
    private void intercambioElementos(int i, int j){
        Collections.swap(arregloNumeros, i,j);
      
      DefaultTableModel model = (DefaultTableModel) tabla.getModel();
      model.addRow(new Object[]{i+1,arregloNumeros.get(i) });
      model.addRow(new Object[]{j+1,arregloNumeros.get(j) });
    }
    
    /**}
     *  @param i es la variable que inicializa el ciclo que recorre el ArrayList
     * @param indice Es el JoptionPane en el cual el usuario ingresa el número del indice a modificar
     * @param mod es la variable que almacena y cambia el formato del número de String a Integer
     * @param real Variable auxiliar que realiza la evaluación con los valores reales de los indices del arreglo
     * @param aleatorio Variable que almacenará el número dado por el metodo Random
     * 
     */
    private void reemplazoElementos(){
         int i; 
         DefaultTableModel model = (DefaultTableModel) tabla.getModel();
         String indice = JOptionPane.showInputDialog("Ingrese el número del indice que desea modificar");
         int mod = Integer.parseInt(indice); //Se hace la conversión del indice a entero
         int real = mod-1; //Auxiliar que evaluará según el número que da el usuario -1 ya que el arraylist inicia en 0
         if(real <= arregloNumeros.size()){ //condicional que verifica si el indice existe en el arraylist
         int opcion = JOptionPane.showConfirmDialog(this, "¿Desea que el número se agregue de forma aleatoria?");
         if(opcion ==0){ //Condicional que indica si se presiona el "yes" se agregue el número aleatorio
                 Random aleatorio = new Random();
                 int numeroAleatorio = aleatorio.nextInt(100);
                 arregloNumeros.set(real,numeroAleatorio);
                  model.addRow(new Object[]{mod, numeroAleatorio});
             } else if(opcion == 1){ //Condicional que indica si se presiona el "no" se despliegue el JOptionPane para el ingreso
              try{
               String elemento = JOptionPane.showInputDialog("Ingrese el nuevo número ");//se pide el número
               i = Integer.parseInt(elemento); //se realiza la conversión
               arregloNumeros.set(real, i);
               model.addRow(new Object[]{mod, i});
                 }catch(NumberFormatException e){ //Excepcion que salta en caso de que se ingrese una letra en el JOptionPane
                        JOptionPane.showMessageDialog(null,"ve,no estás ingresando nada o estás ingresando letras oís? Ingresa un numero");    
                                           }   
             }   
         
         }
        }  
    /**
     * @param posicion indica la posición que el usuario verá en la GUI
     */
    private void invertirArray(){
         DefaultTableModel model = (DefaultTableModel) tabla.getModel(); //Declara la tabla
        for (int i = arregloNumeros.size()-1; i>=0 ; i--){ // Ciclo que recorre de manera inversa el arraylist
            int posicion = i+1;
            model.addRow(new Object[]{posicion, arregloNumeros.get(i)}); // Imprime los datos en la tabla
        }
    }
   
    /**
     * @param  numeroUsuario es el parametro que el usuario ingresará para definir el tamaño del arreglo
     * @param model Genera las columas de la tabla donde se verá el intercambio de posición
     * @param numeroAleatorio llena el arreglo con un número al azar entre el 1 y el 100
     * @param llenado Parametro que realiza el ingreso de los numeros al arreglo
     */
   private void creacionArreglo(){
        int numeroUsuario;
        DefaultTableModel model = (DefaultTableModel) tabla.getModel();
       if (tamañoVector.getText().equals("")) {   
            JOptionPane.showMessageDialog(null, "POR FAVOR INGRESE NUMERO ANTES DE INICIAR");
        } else {
            //Se le pregunta al usuario si desea el ingreso aleatorio o manual.
            int opcion = JOptionPane.showConfirmDialog(this, "¿Desea que los números se agreguen de forma aleatoria?");
     //Condicional que  indica que si se presiona el "Si" se recorra el arreglo y se valla llenando el arraylist con valores aleatorios
            if(opcion == 0){
                Random aleatorio = new Random();
                numeroUsuario = Integer.parseInt(tamañoVector.getText());
            for (int i = 0; i < numeroUsuario; i++) {
                int numeroAleatorio = aleatorio.nextInt(100);
                int posicion=i+1;
                model.addRow(new Object[]{posicion, numeroAleatorio});
                arregloNumeros.add(numeroAleatorio);
                intercambio_button.setEnabled(true); //Se Habilita el botón de intercambio de posiciones
                button_reemplazar.setEnabled(true);//Se Habilita el botón de reemplazar número
                refresh_button.setEnabled(true);//Se Habilita el botón de refrescar arreglo
                invertir_button.setEnabled(true);//Se Habilita el botón de invertir el arreglo
                                                    }
            //Condicional que indica que al presionar el "No" se desplegue una ventana para que el usuario vaya ingresando los números
             }else if(opcion== 1){
                  numeroUsuario = Integer.parseInt(tamañoVector.getText());
                   for (int i = 0; i < numeroUsuario; i++){
                 try {
                 //variable auxiliar para mostrarle el dato al usuario desde la posicion 1
                 int aux = i;
                 int contador = aux+1;
                 String llenado = JOptionPane.showInputDialog("Inserte el dato número "+contador);
                 int posicion=i+1;  
                 //Condicional que pregunta al usuario sobre llenar los espacios vacíos con 0
                 if(llenado.equals("")){
                 int sub_opcion = JOptionPane.showConfirmDialog(this, "¿No agregó un numero, desea que se llene por defecto?");
                     if(sub_opcion == 0){
                     model.addRow(new Object[]{posicion,0});
                     arregloNumeros.add(0);   
                                        }
                     else if(sub_opcion == 1){
                         llenado = JOptionPane.showInputDialog("Inserte el dato número "+contador);
                     }
                  //Condicional que llena el arreglo con el número dado por el usuario  
                 } else{
                        int num = Integer.parseInt(llenado);
                        //Agrega los datos ingresados a la tabla
                         model.addRow(new Object[]{posicion, num});
                         arregloNumeros.add(num);
                        } intercambio_button.setEnabled(true); //Se Habilita el botón de intercambio de posiciones
                          button_reemplazar.setEnabled(true);//Se Habilita el botón de reemplazar número
                          refresh_button.setEnabled(true);//Se Habilita el botón de refrescar arreglo
                          invertir_button.setEnabled(true);//Se Habilita el botón de invertir el arreglo
                 
                     }
                catch(IndexOutOfBoundsException e) {
                        JOptionPane.showMessageDialog(null,"Está buscando en una posición inexistente, intentalo de nuevo");
                                    }
                catch(NullPointerException e){
                    JOptionPane.showMessageDialog(null,"Está buscando en una posición inexistente, intentalo de nuevo");
                }
               }  
                  
            }
         
        }
   }
   
   /**
    * 
    * @param evt el parametro que se ejecuta al dar click al botón crear
    */
    private void crearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_crearMouseClicked
            creacionArreglo();
    }//GEN-LAST:event_crearMouseClicked
                               

    /**
     * 
     * @param evt parametro que ejecuta el evento al dar click al botón intercambiar valor 
     */
    private void intercambio_buttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_intercambio_buttonMouseClicked
        //bloque try para tomar las excepciones
        try{
            //se declaran las variables donde se van a ingresar los indices
             String indice_numero = JOptionPane.showInputDialog("Ingrese el número del primer indice que desea modificar");
             String nuevo = JOptionPane.showInputDialog("Ingrese el número del segundo indice que desea modificar");
             //Variables donde se hace la conversión de String a Int
             int numero_cambio = Integer.parseInt(indice_numero);
             int numero_nuevo = Integer.parseInt(nuevo);
             //Se declaran dos variables auxiliares donde se le resta uno al indice dado por el usuario para hacer la evaluación
             int aux_cambio = numero_cambio-1;
             int aux_nuevo =  numero_nuevo-1;
             if(aux_cambio<= arregloNumeros.size() && aux_nuevo<= arregloNumeros.size()){
             intercambioElementos(aux_cambio,aux_nuevo);
             JOptionPane.showMessageDialog(null,"Se intercambió el indice "+numero_cambio+" Por el indice "+numero_nuevo);
             }else{
             JOptionPane.showMessageDialog(null,"Uno de los indices ingresados no existe");
                  }
            }catch(NumberFormatException e){
             JOptionPane.showMessageDialog(null,"ve,no estás ingresando nada o estás ingresando letras oís? Ingresa un numero");
            }catch(IndexOutOfBoundsException e) {
             JOptionPane.showMessageDialog(null,"Está buscando en una posición inexistente, intentalo de nuevo");
                                                }
        
    }//GEN-LAST:event_intercambio_buttonMouseClicked

    private void tamañoVectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tamañoVectorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tamañoVectorActionPerformed
    //Metodo el cual no permite que el usuario ingrese letras
    private void tamañoVectorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tamañoVectorKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE)) {
            evt.consume();
        }
    }//GEN-LAST:event_tamañoVectorKeyTyped
    private void refrescarArreglo(){
         int numeroUsuario = Integer.parseInt(tamañoVector.getText());
                   for (int i = 0; i < numeroUsuario; i++){
                    int posicion=i+1;               
                     DefaultTableModel model = (DefaultTableModel) tabla.getModel();
                     model.addRow(new Object[]{posicion,arregloNumeros.get(i)});                      
                        }
    }
    private void intercambio_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_intercambio_buttonActionPerformed
       
       
    }//GEN-LAST:event_intercambio_buttonActionPerformed
/**
 * 
 * @param evt parametro que ejecuta el metodo refrescar arreglo al presionar el botón refrescar
 */
    private void refresh_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refresh_buttonActionPerformed
        refrescarArreglo();
    }//GEN-LAST:event_refresh_buttonActionPerformed
/**
 * 
 * @param evt parametro que ejecuta el metodo reemplazoElementos al presionar el botón Reemplazar
 */
    private void button_reemplazarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_reemplazarActionPerformed
            reemplazoElementos();
            
    }//GEN-LAST:event_button_reemplazarActionPerformed

    private void invertir_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invertir_buttonActionPerformed
                invertirArray(); 
    }//GEN-LAST:event_invertir_buttonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_reemplazar;
    private javax.swing.JButton crear;
    private javax.swing.JButton intercambio_button;
    private javax.swing.JButton invertir_button;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refresh_button;
    private javax.swing.JTable tabla;
    private javax.swing.JTextField tamañoVector;
    // End of variables declaration//GEN-END:variables
}
